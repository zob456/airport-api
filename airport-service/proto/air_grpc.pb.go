// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirportDataClient is the client API for AirportData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirportDataClient interface {
	GetAirportDetails(ctx context.Context, in *AirportDetailsReq, opts ...grpc.CallOption) (*AirportDetailsRes, error)
	GetDistance(ctx context.Context, in *AirportDistanceReq, opts ...grpc.CallOption) (*AirportDistanceRes, error)
}

type airportDataClient struct {
	cc grpc.ClientConnInterface
}

func NewAirportDataClient(cc grpc.ClientConnInterface) AirportDataClient {
	return &airportDataClient{cc}
}

func (c *airportDataClient) GetAirportDetails(ctx context.Context, in *AirportDetailsReq, opts ...grpc.CallOption) (*AirportDetailsRes, error) {
	out := new(AirportDetailsRes)
	err := c.cc.Invoke(ctx, "/air.AirportData/GetAirportDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportDataClient) GetDistance(ctx context.Context, in *AirportDistanceReq, opts ...grpc.CallOption) (*AirportDistanceRes, error) {
	out := new(AirportDistanceRes)
	err := c.cc.Invoke(ctx, "/air.AirportData/GetDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirportDataServer is the server API for AirportData service.
// All implementations must embed UnimplementedAirportDataServer
// for forward compatibility
type AirportDataServer interface {
	GetAirportDetails(context.Context, *AirportDetailsReq) (*AirportDetailsRes, error)
	GetDistance(context.Context, *AirportDistanceReq) (*AirportDistanceRes, error)
	mustEmbedUnimplementedAirportDataServer()
}

// UnimplementedAirportDataServer must be embedded to have forward compatible implementations.
type UnimplementedAirportDataServer struct {
}

func (UnimplementedAirportDataServer) GetAirportDetails(context.Context, *AirportDetailsReq) (*AirportDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirportDetails not implemented")
}
func (UnimplementedAirportDataServer) GetDistance(context.Context, *AirportDistanceReq) (*AirportDistanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistance not implemented")
}
func (UnimplementedAirportDataServer) mustEmbedUnimplementedAirportDataServer() {}

// UnsafeAirportDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirportDataServer will
// result in compilation errors.
type UnsafeAirportDataServer interface {
	mustEmbedUnimplementedAirportDataServer()
}

func RegisterAirportDataServer(s grpc.ServiceRegistrar, srv AirportDataServer) {
	s.RegisterService(&AirportData_ServiceDesc, srv)
}

func _AirportData_GetAirportDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportDataServer).GetAirportDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air.AirportData/GetAirportDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportDataServer).GetAirportDetails(ctx, req.(*AirportDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportData_GetDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportDistanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportDataServer).GetDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air.AirportData/GetDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportDataServer).GetDistance(ctx, req.(*AirportDistanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AirportData_ServiceDesc is the grpc.ServiceDesc for AirportData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirportData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "air.AirportData",
	HandlerType: (*AirportDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirportDetails",
			Handler:    _AirportData_GetAirportDetails_Handler,
		},
		{
			MethodName: "GetDistance",
			Handler:    _AirportData_GetDistance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airport-service/proto/air.proto",
}
